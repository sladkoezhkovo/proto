syntax="proto3";

package auth;
option go_package="api/auth/";

service AuthService {
  rpc SignIn(SignInRequest) returns (TokenResponse);
  rpc SignUp(SignUpRequest) returns (TokenResponse);
  rpc Refresh(RefreshRequest) returns (TokenResponse);
  rpc Logout(LogoutRequest) returns (Empty);
  rpc Auth(AuthRequest) returns (AuthResponse);

  // Role CRUD
  rpc CreateRole(CreateRoleRequest) returns (Role);
  rpc FindByIdRole(FindRoleByIdRequest)  returns (Role);
  rpc ListRole(Bounds) returns (ListRoleResponse);
  rpc ListRoleByName(ListRoleByNameRequest) returns (ListRoleResponse);
  rpc UpdateRole(Role) returns (Role);
  rpc DeleteRole(DeleteRoleRequest) returns (Empty);
}

message Bounds {
  int32 limit = 1;
  int32 offset = 2;
}

message SignInRequest {
  string email = 1;
  string password = 2;
}

message SignUpRequest {
  string email = 1;
  string password = 2;
  int64 roleId = 3;
}

message RefreshRequest {
  string refreshToken = 1;
}

message LogoutRequest {
  string accessToken = 1;
}

message Empty { }

message TokenResponse {
  string refreshToken = 1;
  string accessToken = 2;
}

message AuthRequest {
  string accessToken = 1;
  int64 roleId = 2;
}

message AuthResponse {
  bool approved = 1;
}

message CreateRoleRequest {
  string name = 1;
  int32 authority = 2;
}

message FindRoleByIdRequest {
  int64 id = 1;
}

message DeleteRoleRequest {
  int64 id = 1;
}

message ListRoleByNameRequest {
  string name = 1;
  Bounds bounds = 2;
}

message Role {
  int64 id = 1;
  string name = 2;
  int32 authority = 3;
}

message ListRoleResponse {
  repeated Role entries = 1;
  int64 count = 2;
}